<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="44" tokens="233">
<file line="18" path="/Users/sebi/Dropbox/github/treetank/coremodules/core/src/main/java/org/treetank/revisioning/Incremental.java"/>
<file line="18" path="/Users/sebi/Dropbox/github/treetank/coremodules/core/src/main/java/org/treetank/revisioning/SlidingSnapshot.java"/>
<codefragment>
<![CDATA[
public class Incremental implements IRevisioning {

    /**
     * {@inheritDoc}
     */
    @Override
    public NodeBucket combineBuckets(final NodeBucket[] pBuckets) {
        checkArgument(pBuckets.length > 0, "At least one Nodebucket must be provided");
        // create entire bucket..
        final NodeBucket returnVal = new NodeBucket(pBuckets[0].getBucketKey(), pBuckets[0].getLastBucketPointer());
        // ...iterate through the nodes and check if it is stored..
        for (int i = 0; i < pBuckets[0].getNodes().length; i++) {
            boolean bucketSkip = false;
            // ... form the newest version to the oldest one..
            for (int j = 0; !bucketSkip && j < pBuckets.length; j++) {
                // if the node is not set yet but existing in the current version..
                if (pBuckets[j].getNode(i) != null) {
                    // ...break out the loop the next time and..
                    bucketSkip = true;
                    // ...set it
                    returnVal.setNode(i, pBuckets[j].getNode(i));
                }

            }
        }
        return returnVal;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogValue combineBucketsForModification(int pRevisionsToRestore, long pNewBucketKey, NodeBucket[] pBuckets,
        boolean pFullDump) {
        checkArgument(pBuckets.length > 0, "At least one Nodebucket must be provided");
        // create buckets for container..
        final NodeBucket[] returnVal =
            {
                new NodeBucket(pBuckets[0].getBucketKey(), pBuckets[0].getLastBucketPointer()),
                new NodeBucket(pNewBucketKey, pBuckets[0].getBucketKey())
            };
        // ...iterate through the nodes and check if it is stored..
        for (int i = 0; i < pBuckets[0].getNodes().length; i++) {
            boolean bucketSkip = false;
]]>
</codefragment>
</duplication>
</pmd-cpd>